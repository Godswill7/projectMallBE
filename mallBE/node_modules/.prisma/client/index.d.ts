
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model authModel
 * 
 */
export type authModel = $Result.DefaultSelection<Prisma.$authModelPayload>
/**
 * Model dispatcherModel
 * 
 */
export type dispatcherModel = $Result.DefaultSelection<Prisma.$dispatcherModelPayload>
/**
 * Model productModel
 * 
 */
export type productModel = $Result.DefaultSelection<Prisma.$productModelPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more AuthModels
 * const authModels = await prisma.authModel.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more AuthModels
   * const authModels = await prisma.authModel.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.authModel`: Exposes CRUD operations for the **authModel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuthModels
    * const authModels = await prisma.authModel.findMany()
    * ```
    */
  get authModel(): Prisma.authModelDelegate<ExtArgs>;

  /**
   * `prisma.dispatcherModel`: Exposes CRUD operations for the **dispatcherModel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DispatcherModels
    * const dispatcherModels = await prisma.dispatcherModel.findMany()
    * ```
    */
  get dispatcherModel(): Prisma.dispatcherModelDelegate<ExtArgs>;

  /**
   * `prisma.productModel`: Exposes CRUD operations for the **productModel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductModels
    * const productModels = await prisma.productModel.findMany()
    * ```
    */
  get productModel(): Prisma.productModelDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.2.0
   * Query Engine version: 2804dc98259d2ea960602aca6b8e7fdc03c1758f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    authModel: 'authModel',
    dispatcherModel: 'dispatcherModel',
    productModel: 'productModel'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'authModel' | 'dispatcherModel' | 'productModel'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      authModel: {
        payload: Prisma.$authModelPayload<ExtArgs>
        fields: Prisma.authModelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.authModelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$authModelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.authModelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$authModelPayload>
          }
          findFirst: {
            args: Prisma.authModelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$authModelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.authModelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$authModelPayload>
          }
          findMany: {
            args: Prisma.authModelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$authModelPayload>[]
          }
          create: {
            args: Prisma.authModelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$authModelPayload>
          }
          createMany: {
            args: Prisma.authModelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.authModelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$authModelPayload>
          }
          update: {
            args: Prisma.authModelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$authModelPayload>
          }
          deleteMany: {
            args: Prisma.authModelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.authModelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.authModelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$authModelPayload>
          }
          aggregate: {
            args: Prisma.AuthModelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAuthModel>
          }
          groupBy: {
            args: Prisma.authModelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AuthModelGroupByOutputType>[]
          }
          count: {
            args: Prisma.authModelCountArgs<ExtArgs>,
            result: $Utils.Optional<AuthModelCountAggregateOutputType> | number
          }
        }
      }
      dispatcherModel: {
        payload: Prisma.$dispatcherModelPayload<ExtArgs>
        fields: Prisma.dispatcherModelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.dispatcherModelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dispatcherModelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.dispatcherModelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dispatcherModelPayload>
          }
          findFirst: {
            args: Prisma.dispatcherModelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dispatcherModelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.dispatcherModelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dispatcherModelPayload>
          }
          findMany: {
            args: Prisma.dispatcherModelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dispatcherModelPayload>[]
          }
          create: {
            args: Prisma.dispatcherModelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dispatcherModelPayload>
          }
          createMany: {
            args: Prisma.dispatcherModelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.dispatcherModelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dispatcherModelPayload>
          }
          update: {
            args: Prisma.dispatcherModelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dispatcherModelPayload>
          }
          deleteMany: {
            args: Prisma.dispatcherModelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.dispatcherModelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.dispatcherModelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$dispatcherModelPayload>
          }
          aggregate: {
            args: Prisma.DispatcherModelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDispatcherModel>
          }
          groupBy: {
            args: Prisma.dispatcherModelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DispatcherModelGroupByOutputType>[]
          }
          count: {
            args: Prisma.dispatcherModelCountArgs<ExtArgs>,
            result: $Utils.Optional<DispatcherModelCountAggregateOutputType> | number
          }
        }
      }
      productModel: {
        payload: Prisma.$productModelPayload<ExtArgs>
        fields: Prisma.productModelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productModelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productModelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productModelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productModelPayload>
          }
          findFirst: {
            args: Prisma.productModelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productModelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productModelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productModelPayload>
          }
          findMany: {
            args: Prisma.productModelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productModelPayload>[]
          }
          create: {
            args: Prisma.productModelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productModelPayload>
          }
          createMany: {
            args: Prisma.productModelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.productModelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productModelPayload>
          }
          update: {
            args: Prisma.productModelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productModelPayload>
          }
          deleteMany: {
            args: Prisma.productModelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.productModelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.productModelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productModelPayload>
          }
          aggregate: {
            args: Prisma.ProductModelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProductModel>
          }
          groupBy: {
            args: Prisma.productModelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductModelGroupByOutputType>[]
          }
          count: {
            args: Prisma.productModelCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductModelCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AuthModelCountOutputType
   */

  export type AuthModelCountOutputType = {
    store: number
  }

  export type AuthModelCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    store?: boolean | AuthModelCountOutputTypeCountStoreArgs
  }

  // Custom InputTypes

  /**
   * AuthModelCountOutputType without action
   */
  export type AuthModelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthModelCountOutputType
     */
    select?: AuthModelCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AuthModelCountOutputType without action
   */
  export type AuthModelCountOutputTypeCountStoreArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productModelWhereInput
  }



  /**
   * Models
   */

  /**
   * Model authModel
   */

  export type AggregateAuthModel = {
    _count: AuthModelCountAggregateOutputType | null
    _min: AuthModelMinAggregateOutputType | null
    _max: AuthModelMaxAggregateOutputType | null
  }

  export type AuthModelMinAggregateOutputType = {
    id: string | null
    userName: string | null
    email: string | null
    password: string | null
    verified: boolean | null
    token: string | null
    avatar: string | null
    avatarID: string | null
    role: string | null
    roleID: string | null
    createdAt: Date | null
  }

  export type AuthModelMaxAggregateOutputType = {
    id: string | null
    userName: string | null
    email: string | null
    password: string | null
    verified: boolean | null
    token: string | null
    avatar: string | null
    avatarID: string | null
    role: string | null
    roleID: string | null
    createdAt: Date | null
  }

  export type AuthModelCountAggregateOutputType = {
    id: number
    userName: number
    email: number
    password: number
    verified: number
    token: number
    avatar: number
    avatarID: number
    role: number
    roleID: number
    createdAt: number
    _all: number
  }


  export type AuthModelMinAggregateInputType = {
    id?: true
    userName?: true
    email?: true
    password?: true
    verified?: true
    token?: true
    avatar?: true
    avatarID?: true
    role?: true
    roleID?: true
    createdAt?: true
  }

  export type AuthModelMaxAggregateInputType = {
    id?: true
    userName?: true
    email?: true
    password?: true
    verified?: true
    token?: true
    avatar?: true
    avatarID?: true
    role?: true
    roleID?: true
    createdAt?: true
  }

  export type AuthModelCountAggregateInputType = {
    id?: true
    userName?: true
    email?: true
    password?: true
    verified?: true
    token?: true
    avatar?: true
    avatarID?: true
    role?: true
    roleID?: true
    createdAt?: true
    _all?: true
  }

  export type AuthModelAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which authModel to aggregate.
     */
    where?: authModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authModels to fetch.
     */
    orderBy?: authModelOrderByWithRelationInput | authModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: authModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned authModels
    **/
    _count?: true | AuthModelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthModelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthModelMaxAggregateInputType
  }

  export type GetAuthModelAggregateType<T extends AuthModelAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthModel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthModel[P]>
      : GetScalarType<T[P], AggregateAuthModel[P]>
  }




  export type authModelGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: authModelWhereInput
    orderBy?: authModelOrderByWithAggregationInput | authModelOrderByWithAggregationInput[]
    by: AuthModelScalarFieldEnum[] | AuthModelScalarFieldEnum
    having?: authModelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthModelCountAggregateInputType | true
    _min?: AuthModelMinAggregateInputType
    _max?: AuthModelMaxAggregateInputType
  }

  export type AuthModelGroupByOutputType = {
    id: string
    userName: string
    email: string
    password: string
    verified: boolean
    token: string | null
    avatar: string | null
    avatarID: string | null
    role: string | null
    roleID: string | null
    createdAt: Date
    _count: AuthModelCountAggregateOutputType | null
    _min: AuthModelMinAggregateOutputType | null
    _max: AuthModelMaxAggregateOutputType | null
  }

  type GetAuthModelGroupByPayload<T extends authModelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuthModelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthModelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthModelGroupByOutputType[P]>
            : GetScalarType<T[P], AuthModelGroupByOutputType[P]>
        }
      >
    >


  export type authModelSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userName?: boolean
    email?: boolean
    password?: boolean
    verified?: boolean
    token?: boolean
    avatar?: boolean
    avatarID?: boolean
    role?: boolean
    roleID?: boolean
    createdAt?: boolean
    store?: boolean | authModel$storeArgs<ExtArgs>
    _count?: boolean | AuthModelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["authModel"]>

  export type authModelSelectScalar = {
    id?: boolean
    userName?: boolean
    email?: boolean
    password?: boolean
    verified?: boolean
    token?: boolean
    avatar?: boolean
    avatarID?: boolean
    role?: boolean
    roleID?: boolean
    createdAt?: boolean
  }

  export type authModelInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    store?: boolean | authModel$storeArgs<ExtArgs>
    _count?: boolean | AuthModelCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $authModelPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "authModel"
    objects: {
      store: Prisma.$productModelPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      userName: string
      email: string
      password: string
      verified: boolean
      token: string | null
      avatar: string | null
      avatarID: string | null
      role: string | null
      roleID: string | null
      createdAt: Date
    }, ExtArgs["result"]["authModel"]>
    composites: {}
  }


  type authModelGetPayload<S extends boolean | null | undefined | authModelDefaultArgs> = $Result.GetResult<Prisma.$authModelPayload, S>

  type authModelCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<authModelFindManyArgs, 'select' | 'include'> & {
      select?: AuthModelCountAggregateInputType | true
    }

  export interface authModelDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['authModel'], meta: { name: 'authModel' } }
    /**
     * Find zero or one AuthModel that matches the filter.
     * @param {authModelFindUniqueArgs} args - Arguments to find a AuthModel
     * @example
     * // Get one AuthModel
     * const authModel = await prisma.authModel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends authModelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, authModelFindUniqueArgs<ExtArgs>>
    ): Prisma__authModelClient<$Result.GetResult<Prisma.$authModelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AuthModel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {authModelFindUniqueOrThrowArgs} args - Arguments to find a AuthModel
     * @example
     * // Get one AuthModel
     * const authModel = await prisma.authModel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends authModelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, authModelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__authModelClient<$Result.GetResult<Prisma.$authModelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AuthModel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authModelFindFirstArgs} args - Arguments to find a AuthModel
     * @example
     * // Get one AuthModel
     * const authModel = await prisma.authModel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends authModelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, authModelFindFirstArgs<ExtArgs>>
    ): Prisma__authModelClient<$Result.GetResult<Prisma.$authModelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AuthModel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authModelFindFirstOrThrowArgs} args - Arguments to find a AuthModel
     * @example
     * // Get one AuthModel
     * const authModel = await prisma.authModel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends authModelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, authModelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__authModelClient<$Result.GetResult<Prisma.$authModelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AuthModels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authModelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuthModels
     * const authModels = await prisma.authModel.findMany()
     * 
     * // Get first 10 AuthModels
     * const authModels = await prisma.authModel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authModelWithIdOnly = await prisma.authModel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends authModelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, authModelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$authModelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AuthModel.
     * @param {authModelCreateArgs} args - Arguments to create a AuthModel.
     * @example
     * // Create one AuthModel
     * const AuthModel = await prisma.authModel.create({
     *   data: {
     *     // ... data to create a AuthModel
     *   }
     * })
     * 
    **/
    create<T extends authModelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, authModelCreateArgs<ExtArgs>>
    ): Prisma__authModelClient<$Result.GetResult<Prisma.$authModelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AuthModels.
     *     @param {authModelCreateManyArgs} args - Arguments to create many AuthModels.
     *     @example
     *     // Create many AuthModels
     *     const authModel = await prisma.authModel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends authModelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, authModelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AuthModel.
     * @param {authModelDeleteArgs} args - Arguments to delete one AuthModel.
     * @example
     * // Delete one AuthModel
     * const AuthModel = await prisma.authModel.delete({
     *   where: {
     *     // ... filter to delete one AuthModel
     *   }
     * })
     * 
    **/
    delete<T extends authModelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, authModelDeleteArgs<ExtArgs>>
    ): Prisma__authModelClient<$Result.GetResult<Prisma.$authModelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AuthModel.
     * @param {authModelUpdateArgs} args - Arguments to update one AuthModel.
     * @example
     * // Update one AuthModel
     * const authModel = await prisma.authModel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends authModelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, authModelUpdateArgs<ExtArgs>>
    ): Prisma__authModelClient<$Result.GetResult<Prisma.$authModelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AuthModels.
     * @param {authModelDeleteManyArgs} args - Arguments to filter AuthModels to delete.
     * @example
     * // Delete a few AuthModels
     * const { count } = await prisma.authModel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends authModelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, authModelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuthModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authModelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuthModels
     * const authModel = await prisma.authModel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends authModelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, authModelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuthModel.
     * @param {authModelUpsertArgs} args - Arguments to update or create a AuthModel.
     * @example
     * // Update or create a AuthModel
     * const authModel = await prisma.authModel.upsert({
     *   create: {
     *     // ... data to create a AuthModel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuthModel we want to update
     *   }
     * })
    **/
    upsert<T extends authModelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, authModelUpsertArgs<ExtArgs>>
    ): Prisma__authModelClient<$Result.GetResult<Prisma.$authModelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AuthModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authModelCountArgs} args - Arguments to filter AuthModels to count.
     * @example
     * // Count the number of AuthModels
     * const count = await prisma.authModel.count({
     *   where: {
     *     // ... the filter for the AuthModels we want to count
     *   }
     * })
    **/
    count<T extends authModelCountArgs>(
      args?: Subset<T, authModelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthModelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuthModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthModelAggregateArgs>(args: Subset<T, AuthModelAggregateArgs>): Prisma.PrismaPromise<GetAuthModelAggregateType<T>>

    /**
     * Group by AuthModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authModelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends authModelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: authModelGroupByArgs['orderBy'] }
        : { orderBy?: authModelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, authModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthModelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the authModel model
   */
  readonly fields: authModelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for authModel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__authModelClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    store<T extends authModel$storeArgs<ExtArgs> = {}>(args?: Subset<T, authModel$storeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productModelPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the authModel model
   */ 
  interface authModelFieldRefs {
    readonly id: FieldRef<"authModel", 'String'>
    readonly userName: FieldRef<"authModel", 'String'>
    readonly email: FieldRef<"authModel", 'String'>
    readonly password: FieldRef<"authModel", 'String'>
    readonly verified: FieldRef<"authModel", 'Boolean'>
    readonly token: FieldRef<"authModel", 'String'>
    readonly avatar: FieldRef<"authModel", 'String'>
    readonly avatarID: FieldRef<"authModel", 'String'>
    readonly role: FieldRef<"authModel", 'String'>
    readonly roleID: FieldRef<"authModel", 'String'>
    readonly createdAt: FieldRef<"authModel", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * authModel findUnique
   */
  export type authModelFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authModel
     */
    select?: authModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authModelInclude<ExtArgs> | null
    /**
     * Filter, which authModel to fetch.
     */
    where: authModelWhereUniqueInput
  }


  /**
   * authModel findUniqueOrThrow
   */
  export type authModelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authModel
     */
    select?: authModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authModelInclude<ExtArgs> | null
    /**
     * Filter, which authModel to fetch.
     */
    where: authModelWhereUniqueInput
  }


  /**
   * authModel findFirst
   */
  export type authModelFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authModel
     */
    select?: authModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authModelInclude<ExtArgs> | null
    /**
     * Filter, which authModel to fetch.
     */
    where?: authModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authModels to fetch.
     */
    orderBy?: authModelOrderByWithRelationInput | authModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for authModels.
     */
    cursor?: authModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of authModels.
     */
    distinct?: AuthModelScalarFieldEnum | AuthModelScalarFieldEnum[]
  }


  /**
   * authModel findFirstOrThrow
   */
  export type authModelFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authModel
     */
    select?: authModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authModelInclude<ExtArgs> | null
    /**
     * Filter, which authModel to fetch.
     */
    where?: authModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authModels to fetch.
     */
    orderBy?: authModelOrderByWithRelationInput | authModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for authModels.
     */
    cursor?: authModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of authModels.
     */
    distinct?: AuthModelScalarFieldEnum | AuthModelScalarFieldEnum[]
  }


  /**
   * authModel findMany
   */
  export type authModelFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authModel
     */
    select?: authModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authModelInclude<ExtArgs> | null
    /**
     * Filter, which authModels to fetch.
     */
    where?: authModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authModels to fetch.
     */
    orderBy?: authModelOrderByWithRelationInput | authModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing authModels.
     */
    cursor?: authModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authModels.
     */
    skip?: number
    distinct?: AuthModelScalarFieldEnum | AuthModelScalarFieldEnum[]
  }


  /**
   * authModel create
   */
  export type authModelCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authModel
     */
    select?: authModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authModelInclude<ExtArgs> | null
    /**
     * The data needed to create a authModel.
     */
    data: XOR<authModelCreateInput, authModelUncheckedCreateInput>
  }


  /**
   * authModel createMany
   */
  export type authModelCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many authModels.
     */
    data: authModelCreateManyInput | authModelCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * authModel update
   */
  export type authModelUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authModel
     */
    select?: authModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authModelInclude<ExtArgs> | null
    /**
     * The data needed to update a authModel.
     */
    data: XOR<authModelUpdateInput, authModelUncheckedUpdateInput>
    /**
     * Choose, which authModel to update.
     */
    where: authModelWhereUniqueInput
  }


  /**
   * authModel updateMany
   */
  export type authModelUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update authModels.
     */
    data: XOR<authModelUpdateManyMutationInput, authModelUncheckedUpdateManyInput>
    /**
     * Filter which authModels to update
     */
    where?: authModelWhereInput
  }


  /**
   * authModel upsert
   */
  export type authModelUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authModel
     */
    select?: authModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authModelInclude<ExtArgs> | null
    /**
     * The filter to search for the authModel to update in case it exists.
     */
    where: authModelWhereUniqueInput
    /**
     * In case the authModel found by the `where` argument doesn't exist, create a new authModel with this data.
     */
    create: XOR<authModelCreateInput, authModelUncheckedCreateInput>
    /**
     * In case the authModel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<authModelUpdateInput, authModelUncheckedUpdateInput>
  }


  /**
   * authModel delete
   */
  export type authModelDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authModel
     */
    select?: authModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authModelInclude<ExtArgs> | null
    /**
     * Filter which authModel to delete.
     */
    where: authModelWhereUniqueInput
  }


  /**
   * authModel deleteMany
   */
  export type authModelDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which authModels to delete
     */
    where?: authModelWhereInput
  }


  /**
   * authModel.store
   */
  export type authModel$storeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productModel
     */
    select?: productModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productModelInclude<ExtArgs> | null
    where?: productModelWhereInput
    orderBy?: productModelOrderByWithRelationInput | productModelOrderByWithRelationInput[]
    cursor?: productModelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductModelScalarFieldEnum | ProductModelScalarFieldEnum[]
  }


  /**
   * authModel without action
   */
  export type authModelDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the authModel
     */
    select?: authModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: authModelInclude<ExtArgs> | null
  }



  /**
   * Model dispatcherModel
   */

  export type AggregateDispatcherModel = {
    _count: DispatcherModelCountAggregateOutputType | null
    _min: DispatcherModelMinAggregateOutputType | null
    _max: DispatcherModelMaxAggregateOutputType | null
  }

  export type DispatcherModelMinAggregateOutputType = {
    id: string | null
    userName: string | null
    email: string | null
    password: string | null
    verified: boolean | null
    token: string | null
    avatar: string | null
    role: string | null
    roleID: string | null
    createdAt: Date | null
    product: string | null
    productID: string | null
  }

  export type DispatcherModelMaxAggregateOutputType = {
    id: string | null
    userName: string | null
    email: string | null
    password: string | null
    verified: boolean | null
    token: string | null
    avatar: string | null
    role: string | null
    roleID: string | null
    createdAt: Date | null
    product: string | null
    productID: string | null
  }

  export type DispatcherModelCountAggregateOutputType = {
    id: number
    userName: number
    email: number
    password: number
    verified: number
    token: number
    avatar: number
    role: number
    roleID: number
    createdAt: number
    product: number
    productID: number
    _all: number
  }


  export type DispatcherModelMinAggregateInputType = {
    id?: true
    userName?: true
    email?: true
    password?: true
    verified?: true
    token?: true
    avatar?: true
    role?: true
    roleID?: true
    createdAt?: true
    product?: true
    productID?: true
  }

  export type DispatcherModelMaxAggregateInputType = {
    id?: true
    userName?: true
    email?: true
    password?: true
    verified?: true
    token?: true
    avatar?: true
    role?: true
    roleID?: true
    createdAt?: true
    product?: true
    productID?: true
  }

  export type DispatcherModelCountAggregateInputType = {
    id?: true
    userName?: true
    email?: true
    password?: true
    verified?: true
    token?: true
    avatar?: true
    role?: true
    roleID?: true
    createdAt?: true
    product?: true
    productID?: true
    _all?: true
  }

  export type DispatcherModelAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which dispatcherModel to aggregate.
     */
    where?: dispatcherModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dispatcherModels to fetch.
     */
    orderBy?: dispatcherModelOrderByWithRelationInput | dispatcherModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: dispatcherModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dispatcherModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dispatcherModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned dispatcherModels
    **/
    _count?: true | DispatcherModelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DispatcherModelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DispatcherModelMaxAggregateInputType
  }

  export type GetDispatcherModelAggregateType<T extends DispatcherModelAggregateArgs> = {
        [P in keyof T & keyof AggregateDispatcherModel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDispatcherModel[P]>
      : GetScalarType<T[P], AggregateDispatcherModel[P]>
  }




  export type dispatcherModelGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: dispatcherModelWhereInput
    orderBy?: dispatcherModelOrderByWithAggregationInput | dispatcherModelOrderByWithAggregationInput[]
    by: DispatcherModelScalarFieldEnum[] | DispatcherModelScalarFieldEnum
    having?: dispatcherModelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DispatcherModelCountAggregateInputType | true
    _min?: DispatcherModelMinAggregateInputType
    _max?: DispatcherModelMaxAggregateInputType
  }

  export type DispatcherModelGroupByOutputType = {
    id: string
    userName: string
    email: string
    password: string
    verified: boolean
    token: string | null
    avatar: string | null
    role: string
    roleID: string | null
    createdAt: Date
    product: string
    productID: string | null
    _count: DispatcherModelCountAggregateOutputType | null
    _min: DispatcherModelMinAggregateOutputType | null
    _max: DispatcherModelMaxAggregateOutputType | null
  }

  type GetDispatcherModelGroupByPayload<T extends dispatcherModelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DispatcherModelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DispatcherModelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DispatcherModelGroupByOutputType[P]>
            : GetScalarType<T[P], DispatcherModelGroupByOutputType[P]>
        }
      >
    >


  export type dispatcherModelSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userName?: boolean
    email?: boolean
    password?: boolean
    verified?: boolean
    token?: boolean
    avatar?: boolean
    role?: boolean
    roleID?: boolean
    createdAt?: boolean
    product?: boolean
    productID?: boolean
  }, ExtArgs["result"]["dispatcherModel"]>

  export type dispatcherModelSelectScalar = {
    id?: boolean
    userName?: boolean
    email?: boolean
    password?: boolean
    verified?: boolean
    token?: boolean
    avatar?: boolean
    role?: boolean
    roleID?: boolean
    createdAt?: boolean
    product?: boolean
    productID?: boolean
  }


  export type $dispatcherModelPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "dispatcherModel"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: string
      userName: string
      email: string
      password: string
      verified: boolean
      token: string | null
      avatar: string | null
      role: string
      roleID: string | null
      createdAt: Date
      product: string
      productID: string | null
    }, ExtArgs["result"]["dispatcherModel"]>
    composites: {}
  }


  type dispatcherModelGetPayload<S extends boolean | null | undefined | dispatcherModelDefaultArgs> = $Result.GetResult<Prisma.$dispatcherModelPayload, S>

  type dispatcherModelCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<dispatcherModelFindManyArgs, 'select' | 'include'> & {
      select?: DispatcherModelCountAggregateInputType | true
    }

  export interface dispatcherModelDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['dispatcherModel'], meta: { name: 'dispatcherModel' } }
    /**
     * Find zero or one DispatcherModel that matches the filter.
     * @param {dispatcherModelFindUniqueArgs} args - Arguments to find a DispatcherModel
     * @example
     * // Get one DispatcherModel
     * const dispatcherModel = await prisma.dispatcherModel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends dispatcherModelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, dispatcherModelFindUniqueArgs<ExtArgs>>
    ): Prisma__dispatcherModelClient<$Result.GetResult<Prisma.$dispatcherModelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one DispatcherModel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {dispatcherModelFindUniqueOrThrowArgs} args - Arguments to find a DispatcherModel
     * @example
     * // Get one DispatcherModel
     * const dispatcherModel = await prisma.dispatcherModel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends dispatcherModelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, dispatcherModelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__dispatcherModelClient<$Result.GetResult<Prisma.$dispatcherModelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first DispatcherModel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dispatcherModelFindFirstArgs} args - Arguments to find a DispatcherModel
     * @example
     * // Get one DispatcherModel
     * const dispatcherModel = await prisma.dispatcherModel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends dispatcherModelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, dispatcherModelFindFirstArgs<ExtArgs>>
    ): Prisma__dispatcherModelClient<$Result.GetResult<Prisma.$dispatcherModelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first DispatcherModel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dispatcherModelFindFirstOrThrowArgs} args - Arguments to find a DispatcherModel
     * @example
     * // Get one DispatcherModel
     * const dispatcherModel = await prisma.dispatcherModel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends dispatcherModelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, dispatcherModelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__dispatcherModelClient<$Result.GetResult<Prisma.$dispatcherModelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more DispatcherModels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dispatcherModelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DispatcherModels
     * const dispatcherModels = await prisma.dispatcherModel.findMany()
     * 
     * // Get first 10 DispatcherModels
     * const dispatcherModels = await prisma.dispatcherModel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dispatcherModelWithIdOnly = await prisma.dispatcherModel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends dispatcherModelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, dispatcherModelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$dispatcherModelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a DispatcherModel.
     * @param {dispatcherModelCreateArgs} args - Arguments to create a DispatcherModel.
     * @example
     * // Create one DispatcherModel
     * const DispatcherModel = await prisma.dispatcherModel.create({
     *   data: {
     *     // ... data to create a DispatcherModel
     *   }
     * })
     * 
    **/
    create<T extends dispatcherModelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, dispatcherModelCreateArgs<ExtArgs>>
    ): Prisma__dispatcherModelClient<$Result.GetResult<Prisma.$dispatcherModelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many DispatcherModels.
     *     @param {dispatcherModelCreateManyArgs} args - Arguments to create many DispatcherModels.
     *     @example
     *     // Create many DispatcherModels
     *     const dispatcherModel = await prisma.dispatcherModel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends dispatcherModelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, dispatcherModelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DispatcherModel.
     * @param {dispatcherModelDeleteArgs} args - Arguments to delete one DispatcherModel.
     * @example
     * // Delete one DispatcherModel
     * const DispatcherModel = await prisma.dispatcherModel.delete({
     *   where: {
     *     // ... filter to delete one DispatcherModel
     *   }
     * })
     * 
    **/
    delete<T extends dispatcherModelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, dispatcherModelDeleteArgs<ExtArgs>>
    ): Prisma__dispatcherModelClient<$Result.GetResult<Prisma.$dispatcherModelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one DispatcherModel.
     * @param {dispatcherModelUpdateArgs} args - Arguments to update one DispatcherModel.
     * @example
     * // Update one DispatcherModel
     * const dispatcherModel = await prisma.dispatcherModel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends dispatcherModelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, dispatcherModelUpdateArgs<ExtArgs>>
    ): Prisma__dispatcherModelClient<$Result.GetResult<Prisma.$dispatcherModelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more DispatcherModels.
     * @param {dispatcherModelDeleteManyArgs} args - Arguments to filter DispatcherModels to delete.
     * @example
     * // Delete a few DispatcherModels
     * const { count } = await prisma.dispatcherModel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends dispatcherModelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, dispatcherModelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DispatcherModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dispatcherModelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DispatcherModels
     * const dispatcherModel = await prisma.dispatcherModel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends dispatcherModelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, dispatcherModelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DispatcherModel.
     * @param {dispatcherModelUpsertArgs} args - Arguments to update or create a DispatcherModel.
     * @example
     * // Update or create a DispatcherModel
     * const dispatcherModel = await prisma.dispatcherModel.upsert({
     *   create: {
     *     // ... data to create a DispatcherModel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DispatcherModel we want to update
     *   }
     * })
    **/
    upsert<T extends dispatcherModelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, dispatcherModelUpsertArgs<ExtArgs>>
    ): Prisma__dispatcherModelClient<$Result.GetResult<Prisma.$dispatcherModelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of DispatcherModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dispatcherModelCountArgs} args - Arguments to filter DispatcherModels to count.
     * @example
     * // Count the number of DispatcherModels
     * const count = await prisma.dispatcherModel.count({
     *   where: {
     *     // ... the filter for the DispatcherModels we want to count
     *   }
     * })
    **/
    count<T extends dispatcherModelCountArgs>(
      args?: Subset<T, dispatcherModelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DispatcherModelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DispatcherModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispatcherModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DispatcherModelAggregateArgs>(args: Subset<T, DispatcherModelAggregateArgs>): Prisma.PrismaPromise<GetDispatcherModelAggregateType<T>>

    /**
     * Group by DispatcherModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dispatcherModelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends dispatcherModelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: dispatcherModelGroupByArgs['orderBy'] }
        : { orderBy?: dispatcherModelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, dispatcherModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDispatcherModelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the dispatcherModel model
   */
  readonly fields: dispatcherModelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for dispatcherModel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__dispatcherModelClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the dispatcherModel model
   */ 
  interface dispatcherModelFieldRefs {
    readonly id: FieldRef<"dispatcherModel", 'String'>
    readonly userName: FieldRef<"dispatcherModel", 'String'>
    readonly email: FieldRef<"dispatcherModel", 'String'>
    readonly password: FieldRef<"dispatcherModel", 'String'>
    readonly verified: FieldRef<"dispatcherModel", 'Boolean'>
    readonly token: FieldRef<"dispatcherModel", 'String'>
    readonly avatar: FieldRef<"dispatcherModel", 'String'>
    readonly role: FieldRef<"dispatcherModel", 'String'>
    readonly roleID: FieldRef<"dispatcherModel", 'String'>
    readonly createdAt: FieldRef<"dispatcherModel", 'DateTime'>
    readonly product: FieldRef<"dispatcherModel", 'String'>
    readonly productID: FieldRef<"dispatcherModel", 'String'>
  }
    

  // Custom InputTypes

  /**
   * dispatcherModel findUnique
   */
  export type dispatcherModelFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispatcherModel
     */
    select?: dispatcherModelSelect<ExtArgs> | null
    /**
     * Filter, which dispatcherModel to fetch.
     */
    where: dispatcherModelWhereUniqueInput
  }


  /**
   * dispatcherModel findUniqueOrThrow
   */
  export type dispatcherModelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispatcherModel
     */
    select?: dispatcherModelSelect<ExtArgs> | null
    /**
     * Filter, which dispatcherModel to fetch.
     */
    where: dispatcherModelWhereUniqueInput
  }


  /**
   * dispatcherModel findFirst
   */
  export type dispatcherModelFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispatcherModel
     */
    select?: dispatcherModelSelect<ExtArgs> | null
    /**
     * Filter, which dispatcherModel to fetch.
     */
    where?: dispatcherModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dispatcherModels to fetch.
     */
    orderBy?: dispatcherModelOrderByWithRelationInput | dispatcherModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for dispatcherModels.
     */
    cursor?: dispatcherModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dispatcherModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dispatcherModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of dispatcherModels.
     */
    distinct?: DispatcherModelScalarFieldEnum | DispatcherModelScalarFieldEnum[]
  }


  /**
   * dispatcherModel findFirstOrThrow
   */
  export type dispatcherModelFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispatcherModel
     */
    select?: dispatcherModelSelect<ExtArgs> | null
    /**
     * Filter, which dispatcherModel to fetch.
     */
    where?: dispatcherModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dispatcherModels to fetch.
     */
    orderBy?: dispatcherModelOrderByWithRelationInput | dispatcherModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for dispatcherModels.
     */
    cursor?: dispatcherModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dispatcherModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dispatcherModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of dispatcherModels.
     */
    distinct?: DispatcherModelScalarFieldEnum | DispatcherModelScalarFieldEnum[]
  }


  /**
   * dispatcherModel findMany
   */
  export type dispatcherModelFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispatcherModel
     */
    select?: dispatcherModelSelect<ExtArgs> | null
    /**
     * Filter, which dispatcherModels to fetch.
     */
    where?: dispatcherModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dispatcherModels to fetch.
     */
    orderBy?: dispatcherModelOrderByWithRelationInput | dispatcherModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing dispatcherModels.
     */
    cursor?: dispatcherModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dispatcherModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dispatcherModels.
     */
    skip?: number
    distinct?: DispatcherModelScalarFieldEnum | DispatcherModelScalarFieldEnum[]
  }


  /**
   * dispatcherModel create
   */
  export type dispatcherModelCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispatcherModel
     */
    select?: dispatcherModelSelect<ExtArgs> | null
    /**
     * The data needed to create a dispatcherModel.
     */
    data: XOR<dispatcherModelCreateInput, dispatcherModelUncheckedCreateInput>
  }


  /**
   * dispatcherModel createMany
   */
  export type dispatcherModelCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many dispatcherModels.
     */
    data: dispatcherModelCreateManyInput | dispatcherModelCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * dispatcherModel update
   */
  export type dispatcherModelUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispatcherModel
     */
    select?: dispatcherModelSelect<ExtArgs> | null
    /**
     * The data needed to update a dispatcherModel.
     */
    data: XOR<dispatcherModelUpdateInput, dispatcherModelUncheckedUpdateInput>
    /**
     * Choose, which dispatcherModel to update.
     */
    where: dispatcherModelWhereUniqueInput
  }


  /**
   * dispatcherModel updateMany
   */
  export type dispatcherModelUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update dispatcherModels.
     */
    data: XOR<dispatcherModelUpdateManyMutationInput, dispatcherModelUncheckedUpdateManyInput>
    /**
     * Filter which dispatcherModels to update
     */
    where?: dispatcherModelWhereInput
  }


  /**
   * dispatcherModel upsert
   */
  export type dispatcherModelUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispatcherModel
     */
    select?: dispatcherModelSelect<ExtArgs> | null
    /**
     * The filter to search for the dispatcherModel to update in case it exists.
     */
    where: dispatcherModelWhereUniqueInput
    /**
     * In case the dispatcherModel found by the `where` argument doesn't exist, create a new dispatcherModel with this data.
     */
    create: XOR<dispatcherModelCreateInput, dispatcherModelUncheckedCreateInput>
    /**
     * In case the dispatcherModel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<dispatcherModelUpdateInput, dispatcherModelUncheckedUpdateInput>
  }


  /**
   * dispatcherModel delete
   */
  export type dispatcherModelDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispatcherModel
     */
    select?: dispatcherModelSelect<ExtArgs> | null
    /**
     * Filter which dispatcherModel to delete.
     */
    where: dispatcherModelWhereUniqueInput
  }


  /**
   * dispatcherModel deleteMany
   */
  export type dispatcherModelDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which dispatcherModels to delete
     */
    where?: dispatcherModelWhereInput
  }


  /**
   * dispatcherModel without action
   */
  export type dispatcherModelDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dispatcherModel
     */
    select?: dispatcherModelSelect<ExtArgs> | null
  }



  /**
   * Model productModel
   */

  export type AggregateProductModel = {
    _count: ProductModelCountAggregateOutputType | null
    _avg: ProductModelAvgAggregateOutputType | null
    _sum: ProductModelSumAggregateOutputType | null
    _min: ProductModelMinAggregateOutputType | null
    _max: ProductModelMaxAggregateOutputType | null
  }

  export type ProductModelAvgAggregateOutputType = {
    cost: number | null
    price: number | null
  }

  export type ProductModelSumAggregateOutputType = {
    cost: number | null
    price: number | null
  }

  export type ProductModelMinAggregateOutputType = {
    id: string | null
    title: string | null
    cost: number | null
    description: string | null
    category: string | null
    image: string | null
    imageID: string | null
    brand: string | null
    createdAt: Date | null
    condition: string | null
    price: number | null
    userID: string | null
  }

  export type ProductModelMaxAggregateOutputType = {
    id: string | null
    title: string | null
    cost: number | null
    description: string | null
    category: string | null
    image: string | null
    imageID: string | null
    brand: string | null
    createdAt: Date | null
    condition: string | null
    price: number | null
    userID: string | null
  }

  export type ProductModelCountAggregateOutputType = {
    id: number
    title: number
    cost: number
    description: number
    category: number
    image: number
    imageID: number
    brand: number
    createdAt: number
    condition: number
    price: number
    userID: number
    _all: number
  }


  export type ProductModelAvgAggregateInputType = {
    cost?: true
    price?: true
  }

  export type ProductModelSumAggregateInputType = {
    cost?: true
    price?: true
  }

  export type ProductModelMinAggregateInputType = {
    id?: true
    title?: true
    cost?: true
    description?: true
    category?: true
    image?: true
    imageID?: true
    brand?: true
    createdAt?: true
    condition?: true
    price?: true
    userID?: true
  }

  export type ProductModelMaxAggregateInputType = {
    id?: true
    title?: true
    cost?: true
    description?: true
    category?: true
    image?: true
    imageID?: true
    brand?: true
    createdAt?: true
    condition?: true
    price?: true
    userID?: true
  }

  export type ProductModelCountAggregateInputType = {
    id?: true
    title?: true
    cost?: true
    description?: true
    category?: true
    image?: true
    imageID?: true
    brand?: true
    createdAt?: true
    condition?: true
    price?: true
    userID?: true
    _all?: true
  }

  export type ProductModelAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which productModel to aggregate.
     */
    where?: productModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productModels to fetch.
     */
    orderBy?: productModelOrderByWithRelationInput | productModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned productModels
    **/
    _count?: true | ProductModelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductModelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductModelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductModelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductModelMaxAggregateInputType
  }

  export type GetProductModelAggregateType<T extends ProductModelAggregateArgs> = {
        [P in keyof T & keyof AggregateProductModel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductModel[P]>
      : GetScalarType<T[P], AggregateProductModel[P]>
  }




  export type productModelGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productModelWhereInput
    orderBy?: productModelOrderByWithAggregationInput | productModelOrderByWithAggregationInput[]
    by: ProductModelScalarFieldEnum[] | ProductModelScalarFieldEnum
    having?: productModelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductModelCountAggregateInputType | true
    _avg?: ProductModelAvgAggregateInputType
    _sum?: ProductModelSumAggregateInputType
    _min?: ProductModelMinAggregateInputType
    _max?: ProductModelMaxAggregateInputType
  }

  export type ProductModelGroupByOutputType = {
    id: string
    title: string
    cost: number
    description: string
    category: string
    image: string
    imageID: string | null
    brand: string
    createdAt: Date
    condition: string
    price: number
    userID: string
    _count: ProductModelCountAggregateOutputType | null
    _avg: ProductModelAvgAggregateOutputType | null
    _sum: ProductModelSumAggregateOutputType | null
    _min: ProductModelMinAggregateOutputType | null
    _max: ProductModelMaxAggregateOutputType | null
  }

  type GetProductModelGroupByPayload<T extends productModelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductModelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductModelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductModelGroupByOutputType[P]>
            : GetScalarType<T[P], ProductModelGroupByOutputType[P]>
        }
      >
    >


  export type productModelSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    cost?: boolean
    description?: boolean
    category?: boolean
    image?: boolean
    imageID?: boolean
    brand?: boolean
    createdAt?: boolean
    condition?: boolean
    price?: boolean
    userID?: boolean
    user?: boolean | authModelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productModel"]>

  export type productModelSelectScalar = {
    id?: boolean
    title?: boolean
    cost?: boolean
    description?: boolean
    category?: boolean
    image?: boolean
    imageID?: boolean
    brand?: boolean
    createdAt?: boolean
    condition?: boolean
    price?: boolean
    userID?: boolean
  }

  export type productModelInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | authModelDefaultArgs<ExtArgs>
  }


  export type $productModelPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "productModel"
    objects: {
      user: Prisma.$authModelPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      title: string
      cost: number
      description: string
      category: string
      image: string
      imageID: string | null
      brand: string
      createdAt: Date
      condition: string
      price: number
      userID: string
    }, ExtArgs["result"]["productModel"]>
    composites: {}
  }


  type productModelGetPayload<S extends boolean | null | undefined | productModelDefaultArgs> = $Result.GetResult<Prisma.$productModelPayload, S>

  type productModelCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<productModelFindManyArgs, 'select' | 'include'> & {
      select?: ProductModelCountAggregateInputType | true
    }

  export interface productModelDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['productModel'], meta: { name: 'productModel' } }
    /**
     * Find zero or one ProductModel that matches the filter.
     * @param {productModelFindUniqueArgs} args - Arguments to find a ProductModel
     * @example
     * // Get one ProductModel
     * const productModel = await prisma.productModel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productModelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, productModelFindUniqueArgs<ExtArgs>>
    ): Prisma__productModelClient<$Result.GetResult<Prisma.$productModelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ProductModel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {productModelFindUniqueOrThrowArgs} args - Arguments to find a ProductModel
     * @example
     * // Get one ProductModel
     * const productModel = await prisma.productModel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productModelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productModelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__productModelClient<$Result.GetResult<Prisma.$productModelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ProductModel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productModelFindFirstArgs} args - Arguments to find a ProductModel
     * @example
     * // Get one ProductModel
     * const productModel = await prisma.productModel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productModelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, productModelFindFirstArgs<ExtArgs>>
    ): Prisma__productModelClient<$Result.GetResult<Prisma.$productModelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ProductModel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productModelFindFirstOrThrowArgs} args - Arguments to find a ProductModel
     * @example
     * // Get one ProductModel
     * const productModel = await prisma.productModel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productModelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productModelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__productModelClient<$Result.GetResult<Prisma.$productModelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ProductModels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productModelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductModels
     * const productModels = await prisma.productModel.findMany()
     * 
     * // Get first 10 ProductModels
     * const productModels = await prisma.productModel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productModelWithIdOnly = await prisma.productModel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends productModelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productModelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productModelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ProductModel.
     * @param {productModelCreateArgs} args - Arguments to create a ProductModel.
     * @example
     * // Create one ProductModel
     * const ProductModel = await prisma.productModel.create({
     *   data: {
     *     // ... data to create a ProductModel
     *   }
     * })
     * 
    **/
    create<T extends productModelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, productModelCreateArgs<ExtArgs>>
    ): Prisma__productModelClient<$Result.GetResult<Prisma.$productModelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ProductModels.
     *     @param {productModelCreateManyArgs} args - Arguments to create many ProductModels.
     *     @example
     *     // Create many ProductModels
     *     const productModel = await prisma.productModel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends productModelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productModelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductModel.
     * @param {productModelDeleteArgs} args - Arguments to delete one ProductModel.
     * @example
     * // Delete one ProductModel
     * const ProductModel = await prisma.productModel.delete({
     *   where: {
     *     // ... filter to delete one ProductModel
     *   }
     * })
     * 
    **/
    delete<T extends productModelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, productModelDeleteArgs<ExtArgs>>
    ): Prisma__productModelClient<$Result.GetResult<Prisma.$productModelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ProductModel.
     * @param {productModelUpdateArgs} args - Arguments to update one ProductModel.
     * @example
     * // Update one ProductModel
     * const productModel = await prisma.productModel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productModelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, productModelUpdateArgs<ExtArgs>>
    ): Prisma__productModelClient<$Result.GetResult<Prisma.$productModelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ProductModels.
     * @param {productModelDeleteManyArgs} args - Arguments to filter ProductModels to delete.
     * @example
     * // Delete a few ProductModels
     * const { count } = await prisma.productModel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productModelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productModelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productModelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductModels
     * const productModel = await prisma.productModel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productModelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, productModelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductModel.
     * @param {productModelUpsertArgs} args - Arguments to update or create a ProductModel.
     * @example
     * // Update or create a ProductModel
     * const productModel = await prisma.productModel.upsert({
     *   create: {
     *     // ... data to create a ProductModel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductModel we want to update
     *   }
     * })
    **/
    upsert<T extends productModelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, productModelUpsertArgs<ExtArgs>>
    ): Prisma__productModelClient<$Result.GetResult<Prisma.$productModelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ProductModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productModelCountArgs} args - Arguments to filter ProductModels to count.
     * @example
     * // Count the number of ProductModels
     * const count = await prisma.productModel.count({
     *   where: {
     *     // ... the filter for the ProductModels we want to count
     *   }
     * })
    **/
    count<T extends productModelCountArgs>(
      args?: Subset<T, productModelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductModelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductModelAggregateArgs>(args: Subset<T, ProductModelAggregateArgs>): Prisma.PrismaPromise<GetProductModelAggregateType<T>>

    /**
     * Group by ProductModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productModelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productModelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productModelGroupByArgs['orderBy'] }
        : { orderBy?: productModelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductModelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the productModel model
   */
  readonly fields: productModelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for productModel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productModelClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends authModelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, authModelDefaultArgs<ExtArgs>>): Prisma__authModelClient<$Result.GetResult<Prisma.$authModelPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the productModel model
   */ 
  interface productModelFieldRefs {
    readonly id: FieldRef<"productModel", 'String'>
    readonly title: FieldRef<"productModel", 'String'>
    readonly cost: FieldRef<"productModel", 'Int'>
    readonly description: FieldRef<"productModel", 'String'>
    readonly category: FieldRef<"productModel", 'String'>
    readonly image: FieldRef<"productModel", 'String'>
    readonly imageID: FieldRef<"productModel", 'String'>
    readonly brand: FieldRef<"productModel", 'String'>
    readonly createdAt: FieldRef<"productModel", 'DateTime'>
    readonly condition: FieldRef<"productModel", 'String'>
    readonly price: FieldRef<"productModel", 'Int'>
    readonly userID: FieldRef<"productModel", 'String'>
  }
    

  // Custom InputTypes

  /**
   * productModel findUnique
   */
  export type productModelFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productModel
     */
    select?: productModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productModelInclude<ExtArgs> | null
    /**
     * Filter, which productModel to fetch.
     */
    where: productModelWhereUniqueInput
  }


  /**
   * productModel findUniqueOrThrow
   */
  export type productModelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productModel
     */
    select?: productModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productModelInclude<ExtArgs> | null
    /**
     * Filter, which productModel to fetch.
     */
    where: productModelWhereUniqueInput
  }


  /**
   * productModel findFirst
   */
  export type productModelFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productModel
     */
    select?: productModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productModelInclude<ExtArgs> | null
    /**
     * Filter, which productModel to fetch.
     */
    where?: productModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productModels to fetch.
     */
    orderBy?: productModelOrderByWithRelationInput | productModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productModels.
     */
    cursor?: productModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productModels.
     */
    distinct?: ProductModelScalarFieldEnum | ProductModelScalarFieldEnum[]
  }


  /**
   * productModel findFirstOrThrow
   */
  export type productModelFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productModel
     */
    select?: productModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productModelInclude<ExtArgs> | null
    /**
     * Filter, which productModel to fetch.
     */
    where?: productModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productModels to fetch.
     */
    orderBy?: productModelOrderByWithRelationInput | productModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productModels.
     */
    cursor?: productModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productModels.
     */
    distinct?: ProductModelScalarFieldEnum | ProductModelScalarFieldEnum[]
  }


  /**
   * productModel findMany
   */
  export type productModelFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productModel
     */
    select?: productModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productModelInclude<ExtArgs> | null
    /**
     * Filter, which productModels to fetch.
     */
    where?: productModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productModels to fetch.
     */
    orderBy?: productModelOrderByWithRelationInput | productModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing productModels.
     */
    cursor?: productModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productModels.
     */
    skip?: number
    distinct?: ProductModelScalarFieldEnum | ProductModelScalarFieldEnum[]
  }


  /**
   * productModel create
   */
  export type productModelCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productModel
     */
    select?: productModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productModelInclude<ExtArgs> | null
    /**
     * The data needed to create a productModel.
     */
    data: XOR<productModelCreateInput, productModelUncheckedCreateInput>
  }


  /**
   * productModel createMany
   */
  export type productModelCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many productModels.
     */
    data: productModelCreateManyInput | productModelCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * productModel update
   */
  export type productModelUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productModel
     */
    select?: productModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productModelInclude<ExtArgs> | null
    /**
     * The data needed to update a productModel.
     */
    data: XOR<productModelUpdateInput, productModelUncheckedUpdateInput>
    /**
     * Choose, which productModel to update.
     */
    where: productModelWhereUniqueInput
  }


  /**
   * productModel updateMany
   */
  export type productModelUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update productModels.
     */
    data: XOR<productModelUpdateManyMutationInput, productModelUncheckedUpdateManyInput>
    /**
     * Filter which productModels to update
     */
    where?: productModelWhereInput
  }


  /**
   * productModel upsert
   */
  export type productModelUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productModel
     */
    select?: productModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productModelInclude<ExtArgs> | null
    /**
     * The filter to search for the productModel to update in case it exists.
     */
    where: productModelWhereUniqueInput
    /**
     * In case the productModel found by the `where` argument doesn't exist, create a new productModel with this data.
     */
    create: XOR<productModelCreateInput, productModelUncheckedCreateInput>
    /**
     * In case the productModel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productModelUpdateInput, productModelUncheckedUpdateInput>
  }


  /**
   * productModel delete
   */
  export type productModelDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productModel
     */
    select?: productModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productModelInclude<ExtArgs> | null
    /**
     * Filter which productModel to delete.
     */
    where: productModelWhereUniqueInput
  }


  /**
   * productModel deleteMany
   */
  export type productModelDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which productModels to delete
     */
    where?: productModelWhereInput
  }


  /**
   * productModel without action
   */
  export type productModelDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productModel
     */
    select?: productModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productModelInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AuthModelScalarFieldEnum: {
    id: 'id',
    userName: 'userName',
    email: 'email',
    password: 'password',
    verified: 'verified',
    token: 'token',
    avatar: 'avatar',
    avatarID: 'avatarID',
    role: 'role',
    roleID: 'roleID',
    createdAt: 'createdAt'
  };

  export type AuthModelScalarFieldEnum = (typeof AuthModelScalarFieldEnum)[keyof typeof AuthModelScalarFieldEnum]


  export const DispatcherModelScalarFieldEnum: {
    id: 'id',
    userName: 'userName',
    email: 'email',
    password: 'password',
    verified: 'verified',
    token: 'token',
    avatar: 'avatar',
    role: 'role',
    roleID: 'roleID',
    createdAt: 'createdAt',
    product: 'product',
    productID: 'productID'
  };

  export type DispatcherModelScalarFieldEnum = (typeof DispatcherModelScalarFieldEnum)[keyof typeof DispatcherModelScalarFieldEnum]


  export const ProductModelScalarFieldEnum: {
    id: 'id',
    title: 'title',
    cost: 'cost',
    description: 'description',
    category: 'category',
    image: 'image',
    imageID: 'imageID',
    brand: 'brand',
    createdAt: 'createdAt',
    condition: 'condition',
    price: 'price',
    userID: 'userID'
  };

  export type ProductModelScalarFieldEnum = (typeof ProductModelScalarFieldEnum)[keyof typeof ProductModelScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type authModelWhereInput = {
    AND?: authModelWhereInput | authModelWhereInput[]
    OR?: authModelWhereInput[]
    NOT?: authModelWhereInput | authModelWhereInput[]
    id?: StringFilter<"authModel"> | string
    userName?: StringFilter<"authModel"> | string
    email?: StringFilter<"authModel"> | string
    password?: StringFilter<"authModel"> | string
    verified?: BoolFilter<"authModel"> | boolean
    token?: StringNullableFilter<"authModel"> | string | null
    avatar?: StringNullableFilter<"authModel"> | string | null
    avatarID?: StringNullableFilter<"authModel"> | string | null
    role?: StringNullableFilter<"authModel"> | string | null
    roleID?: StringNullableFilter<"authModel"> | string | null
    createdAt?: DateTimeFilter<"authModel"> | Date | string
    store?: ProductModelListRelationFilter
  }

  export type authModelOrderByWithRelationInput = {
    id?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    verified?: SortOrder
    token?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    avatarID?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    roleID?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    store?: productModelOrderByRelationAggregateInput
  }

  export type authModelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    avatarID?: string
    roleID?: string
    AND?: authModelWhereInput | authModelWhereInput[]
    OR?: authModelWhereInput[]
    NOT?: authModelWhereInput | authModelWhereInput[]
    userName?: StringFilter<"authModel"> | string
    password?: StringFilter<"authModel"> | string
    verified?: BoolFilter<"authModel"> | boolean
    token?: StringNullableFilter<"authModel"> | string | null
    avatar?: StringNullableFilter<"authModel"> | string | null
    role?: StringNullableFilter<"authModel"> | string | null
    createdAt?: DateTimeFilter<"authModel"> | Date | string
    store?: ProductModelListRelationFilter
  }, "id" | "email" | "avatarID" | "roleID">

  export type authModelOrderByWithAggregationInput = {
    id?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    verified?: SortOrder
    token?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    avatarID?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    roleID?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: authModelCountOrderByAggregateInput
    _max?: authModelMaxOrderByAggregateInput
    _min?: authModelMinOrderByAggregateInput
  }

  export type authModelScalarWhereWithAggregatesInput = {
    AND?: authModelScalarWhereWithAggregatesInput | authModelScalarWhereWithAggregatesInput[]
    OR?: authModelScalarWhereWithAggregatesInput[]
    NOT?: authModelScalarWhereWithAggregatesInput | authModelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"authModel"> | string
    userName?: StringWithAggregatesFilter<"authModel"> | string
    email?: StringWithAggregatesFilter<"authModel"> | string
    password?: StringWithAggregatesFilter<"authModel"> | string
    verified?: BoolWithAggregatesFilter<"authModel"> | boolean
    token?: StringNullableWithAggregatesFilter<"authModel"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"authModel"> | string | null
    avatarID?: StringNullableWithAggregatesFilter<"authModel"> | string | null
    role?: StringNullableWithAggregatesFilter<"authModel"> | string | null
    roleID?: StringNullableWithAggregatesFilter<"authModel"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"authModel"> | Date | string
  }

  export type dispatcherModelWhereInput = {
    AND?: dispatcherModelWhereInput | dispatcherModelWhereInput[]
    OR?: dispatcherModelWhereInput[]
    NOT?: dispatcherModelWhereInput | dispatcherModelWhereInput[]
    id?: StringFilter<"dispatcherModel"> | string
    userName?: StringFilter<"dispatcherModel"> | string
    email?: StringFilter<"dispatcherModel"> | string
    password?: StringFilter<"dispatcherModel"> | string
    verified?: BoolFilter<"dispatcherModel"> | boolean
    token?: StringNullableFilter<"dispatcherModel"> | string | null
    avatar?: StringNullableFilter<"dispatcherModel"> | string | null
    role?: StringFilter<"dispatcherModel"> | string
    roleID?: StringNullableFilter<"dispatcherModel"> | string | null
    createdAt?: DateTimeFilter<"dispatcherModel"> | Date | string
    product?: StringFilter<"dispatcherModel"> | string
    productID?: StringNullableFilter<"dispatcherModel"> | string | null
  }

  export type dispatcherModelOrderByWithRelationInput = {
    id?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    verified?: SortOrder
    token?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    role?: SortOrder
    roleID?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    product?: SortOrder
    productID?: SortOrderInput | SortOrder
  }

  export type dispatcherModelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    roleID?: string
    productID?: string
    AND?: dispatcherModelWhereInput | dispatcherModelWhereInput[]
    OR?: dispatcherModelWhereInput[]
    NOT?: dispatcherModelWhereInput | dispatcherModelWhereInput[]
    userName?: StringFilter<"dispatcherModel"> | string
    password?: StringFilter<"dispatcherModel"> | string
    verified?: BoolFilter<"dispatcherModel"> | boolean
    token?: StringNullableFilter<"dispatcherModel"> | string | null
    avatar?: StringNullableFilter<"dispatcherModel"> | string | null
    role?: StringFilter<"dispatcherModel"> | string
    createdAt?: DateTimeFilter<"dispatcherModel"> | Date | string
    product?: StringFilter<"dispatcherModel"> | string
  }, "id" | "email" | "roleID" | "productID">

  export type dispatcherModelOrderByWithAggregationInput = {
    id?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    verified?: SortOrder
    token?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    role?: SortOrder
    roleID?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    product?: SortOrder
    productID?: SortOrderInput | SortOrder
    _count?: dispatcherModelCountOrderByAggregateInput
    _max?: dispatcherModelMaxOrderByAggregateInput
    _min?: dispatcherModelMinOrderByAggregateInput
  }

  export type dispatcherModelScalarWhereWithAggregatesInput = {
    AND?: dispatcherModelScalarWhereWithAggregatesInput | dispatcherModelScalarWhereWithAggregatesInput[]
    OR?: dispatcherModelScalarWhereWithAggregatesInput[]
    NOT?: dispatcherModelScalarWhereWithAggregatesInput | dispatcherModelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"dispatcherModel"> | string
    userName?: StringWithAggregatesFilter<"dispatcherModel"> | string
    email?: StringWithAggregatesFilter<"dispatcherModel"> | string
    password?: StringWithAggregatesFilter<"dispatcherModel"> | string
    verified?: BoolWithAggregatesFilter<"dispatcherModel"> | boolean
    token?: StringNullableWithAggregatesFilter<"dispatcherModel"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"dispatcherModel"> | string | null
    role?: StringWithAggregatesFilter<"dispatcherModel"> | string
    roleID?: StringNullableWithAggregatesFilter<"dispatcherModel"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"dispatcherModel"> | Date | string
    product?: StringWithAggregatesFilter<"dispatcherModel"> | string
    productID?: StringNullableWithAggregatesFilter<"dispatcherModel"> | string | null
  }

  export type productModelWhereInput = {
    AND?: productModelWhereInput | productModelWhereInput[]
    OR?: productModelWhereInput[]
    NOT?: productModelWhereInput | productModelWhereInput[]
    id?: StringFilter<"productModel"> | string
    title?: StringFilter<"productModel"> | string
    cost?: IntFilter<"productModel"> | number
    description?: StringFilter<"productModel"> | string
    category?: StringFilter<"productModel"> | string
    image?: StringFilter<"productModel"> | string
    imageID?: StringNullableFilter<"productModel"> | string | null
    brand?: StringFilter<"productModel"> | string
    createdAt?: DateTimeFilter<"productModel"> | Date | string
    condition?: StringFilter<"productModel"> | string
    price?: IntFilter<"productModel"> | number
    userID?: StringFilter<"productModel"> | string
    user?: XOR<AuthModelRelationFilter, authModelWhereInput>
  }

  export type productModelOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    cost?: SortOrder
    description?: SortOrder
    category?: SortOrder
    image?: SortOrder
    imageID?: SortOrderInput | SortOrder
    brand?: SortOrder
    createdAt?: SortOrder
    condition?: SortOrder
    price?: SortOrder
    userID?: SortOrder
    user?: authModelOrderByWithRelationInput
  }

  export type productModelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: productModelWhereInput | productModelWhereInput[]
    OR?: productModelWhereInput[]
    NOT?: productModelWhereInput | productModelWhereInput[]
    title?: StringFilter<"productModel"> | string
    cost?: IntFilter<"productModel"> | number
    description?: StringFilter<"productModel"> | string
    category?: StringFilter<"productModel"> | string
    image?: StringFilter<"productModel"> | string
    imageID?: StringNullableFilter<"productModel"> | string | null
    brand?: StringFilter<"productModel"> | string
    createdAt?: DateTimeFilter<"productModel"> | Date | string
    condition?: StringFilter<"productModel"> | string
    price?: IntFilter<"productModel"> | number
    userID?: StringFilter<"productModel"> | string
    user?: XOR<AuthModelRelationFilter, authModelWhereInput>
  }, "id">

  export type productModelOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    cost?: SortOrder
    description?: SortOrder
    category?: SortOrder
    image?: SortOrder
    imageID?: SortOrderInput | SortOrder
    brand?: SortOrder
    createdAt?: SortOrder
    condition?: SortOrder
    price?: SortOrder
    userID?: SortOrder
    _count?: productModelCountOrderByAggregateInput
    _avg?: productModelAvgOrderByAggregateInput
    _max?: productModelMaxOrderByAggregateInput
    _min?: productModelMinOrderByAggregateInput
    _sum?: productModelSumOrderByAggregateInput
  }

  export type productModelScalarWhereWithAggregatesInput = {
    AND?: productModelScalarWhereWithAggregatesInput | productModelScalarWhereWithAggregatesInput[]
    OR?: productModelScalarWhereWithAggregatesInput[]
    NOT?: productModelScalarWhereWithAggregatesInput | productModelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"productModel"> | string
    title?: StringWithAggregatesFilter<"productModel"> | string
    cost?: IntWithAggregatesFilter<"productModel"> | number
    description?: StringWithAggregatesFilter<"productModel"> | string
    category?: StringWithAggregatesFilter<"productModel"> | string
    image?: StringWithAggregatesFilter<"productModel"> | string
    imageID?: StringNullableWithAggregatesFilter<"productModel"> | string | null
    brand?: StringWithAggregatesFilter<"productModel"> | string
    createdAt?: DateTimeWithAggregatesFilter<"productModel"> | Date | string
    condition?: StringWithAggregatesFilter<"productModel"> | string
    price?: IntWithAggregatesFilter<"productModel"> | number
    userID?: StringWithAggregatesFilter<"productModel"> | string
  }

  export type authModelCreateInput = {
    id?: string
    userName: string
    email: string
    password: string
    verified?: boolean
    token?: string | null
    avatar?: string | null
    avatarID?: string | null
    role?: string | null
    roleID?: string | null
    createdAt?: Date | string
    store?: productModelCreateNestedManyWithoutUserInput
  }

  export type authModelUncheckedCreateInput = {
    id?: string
    userName: string
    email: string
    password: string
    verified?: boolean
    token?: string | null
    avatar?: string | null
    avatarID?: string | null
    role?: string | null
    roleID?: string | null
    createdAt?: Date | string
    store?: productModelUncheckedCreateNestedManyWithoutUserInput
  }

  export type authModelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    avatarID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    roleID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    store?: productModelUpdateManyWithoutUserNestedInput
  }

  export type authModelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    avatarID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    roleID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    store?: productModelUncheckedUpdateManyWithoutUserNestedInput
  }

  export type authModelCreateManyInput = {
    id?: string
    userName: string
    email: string
    password: string
    verified?: boolean
    token?: string | null
    avatar?: string | null
    avatarID?: string | null
    role?: string | null
    roleID?: string | null
    createdAt?: Date | string
  }

  export type authModelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    avatarID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    roleID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type authModelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    avatarID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    roleID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type dispatcherModelCreateInput = {
    id?: string
    userName: string
    email: string
    password: string
    verified?: boolean
    token?: string | null
    avatar?: string | null
    role: string
    roleID?: string | null
    createdAt?: Date | string
    product: string
    productID?: string | null
  }

  export type dispatcherModelUncheckedCreateInput = {
    id?: string
    userName: string
    email: string
    password: string
    verified?: boolean
    token?: string | null
    avatar?: string | null
    role: string
    roleID?: string | null
    createdAt?: Date | string
    product: string
    productID?: string | null
  }

  export type dispatcherModelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    roleID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: StringFieldUpdateOperationsInput | string
    productID?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type dispatcherModelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    roleID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: StringFieldUpdateOperationsInput | string
    productID?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type dispatcherModelCreateManyInput = {
    id?: string
    userName: string
    email: string
    password: string
    verified?: boolean
    token?: string | null
    avatar?: string | null
    role: string
    roleID?: string | null
    createdAt?: Date | string
    product: string
    productID?: string | null
  }

  export type dispatcherModelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    roleID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: StringFieldUpdateOperationsInput | string
    productID?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type dispatcherModelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    roleID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: StringFieldUpdateOperationsInput | string
    productID?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type productModelCreateInput = {
    id?: string
    title: string
    cost: number
    description: string
    category: string
    image: string
    imageID?: string | null
    brand: string
    createdAt?: Date | string
    condition: string
    price: number
    user: authModelCreateNestedOneWithoutStoreInput
  }

  export type productModelUncheckedCreateInput = {
    id?: string
    title: string
    cost: number
    description: string
    category: string
    image: string
    imageID?: string | null
    brand: string
    createdAt?: Date | string
    condition: string
    price: number
    userID: string
  }

  export type productModelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    imageID?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    condition?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    user?: authModelUpdateOneRequiredWithoutStoreNestedInput
  }

  export type productModelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    imageID?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    condition?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    userID?: StringFieldUpdateOperationsInput | string
  }

  export type productModelCreateManyInput = {
    id?: string
    title: string
    cost: number
    description: string
    category: string
    image: string
    imageID?: string | null
    brand: string
    createdAt?: Date | string
    condition: string
    price: number
    userID: string
  }

  export type productModelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    imageID?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    condition?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type productModelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    imageID?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    condition?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    userID?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ProductModelListRelationFilter = {
    every?: productModelWhereInput
    some?: productModelWhereInput
    none?: productModelWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type productModelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type authModelCountOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    verified?: SortOrder
    token?: SortOrder
    avatar?: SortOrder
    avatarID?: SortOrder
    role?: SortOrder
    roleID?: SortOrder
    createdAt?: SortOrder
  }

  export type authModelMaxOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    verified?: SortOrder
    token?: SortOrder
    avatar?: SortOrder
    avatarID?: SortOrder
    role?: SortOrder
    roleID?: SortOrder
    createdAt?: SortOrder
  }

  export type authModelMinOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    verified?: SortOrder
    token?: SortOrder
    avatar?: SortOrder
    avatarID?: SortOrder
    role?: SortOrder
    roleID?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type dispatcherModelCountOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    verified?: SortOrder
    token?: SortOrder
    avatar?: SortOrder
    role?: SortOrder
    roleID?: SortOrder
    createdAt?: SortOrder
    product?: SortOrder
    productID?: SortOrder
  }

  export type dispatcherModelMaxOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    verified?: SortOrder
    token?: SortOrder
    avatar?: SortOrder
    role?: SortOrder
    roleID?: SortOrder
    createdAt?: SortOrder
    product?: SortOrder
    productID?: SortOrder
  }

  export type dispatcherModelMinOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    verified?: SortOrder
    token?: SortOrder
    avatar?: SortOrder
    role?: SortOrder
    roleID?: SortOrder
    createdAt?: SortOrder
    product?: SortOrder
    productID?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type AuthModelRelationFilter = {
    is?: authModelWhereInput
    isNot?: authModelWhereInput
  }

  export type productModelCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    cost?: SortOrder
    description?: SortOrder
    category?: SortOrder
    image?: SortOrder
    imageID?: SortOrder
    brand?: SortOrder
    createdAt?: SortOrder
    condition?: SortOrder
    price?: SortOrder
    userID?: SortOrder
  }

  export type productModelAvgOrderByAggregateInput = {
    cost?: SortOrder
    price?: SortOrder
  }

  export type productModelMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    cost?: SortOrder
    description?: SortOrder
    category?: SortOrder
    image?: SortOrder
    imageID?: SortOrder
    brand?: SortOrder
    createdAt?: SortOrder
    condition?: SortOrder
    price?: SortOrder
    userID?: SortOrder
  }

  export type productModelMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    cost?: SortOrder
    description?: SortOrder
    category?: SortOrder
    image?: SortOrder
    imageID?: SortOrder
    brand?: SortOrder
    createdAt?: SortOrder
    condition?: SortOrder
    price?: SortOrder
    userID?: SortOrder
  }

  export type productModelSumOrderByAggregateInput = {
    cost?: SortOrder
    price?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type productModelCreateNestedManyWithoutUserInput = {
    create?: XOR<productModelCreateWithoutUserInput, productModelUncheckedCreateWithoutUserInput> | productModelCreateWithoutUserInput[] | productModelUncheckedCreateWithoutUserInput[]
    connectOrCreate?: productModelCreateOrConnectWithoutUserInput | productModelCreateOrConnectWithoutUserInput[]
    createMany?: productModelCreateManyUserInputEnvelope
    connect?: productModelWhereUniqueInput | productModelWhereUniqueInput[]
  }

  export type productModelUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<productModelCreateWithoutUserInput, productModelUncheckedCreateWithoutUserInput> | productModelCreateWithoutUserInput[] | productModelUncheckedCreateWithoutUserInput[]
    connectOrCreate?: productModelCreateOrConnectWithoutUserInput | productModelCreateOrConnectWithoutUserInput[]
    createMany?: productModelCreateManyUserInputEnvelope
    connect?: productModelWhereUniqueInput | productModelWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type productModelUpdateManyWithoutUserNestedInput = {
    create?: XOR<productModelCreateWithoutUserInput, productModelUncheckedCreateWithoutUserInput> | productModelCreateWithoutUserInput[] | productModelUncheckedCreateWithoutUserInput[]
    connectOrCreate?: productModelCreateOrConnectWithoutUserInput | productModelCreateOrConnectWithoutUserInput[]
    upsert?: productModelUpsertWithWhereUniqueWithoutUserInput | productModelUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: productModelCreateManyUserInputEnvelope
    set?: productModelWhereUniqueInput | productModelWhereUniqueInput[]
    disconnect?: productModelWhereUniqueInput | productModelWhereUniqueInput[]
    delete?: productModelWhereUniqueInput | productModelWhereUniqueInput[]
    connect?: productModelWhereUniqueInput | productModelWhereUniqueInput[]
    update?: productModelUpdateWithWhereUniqueWithoutUserInput | productModelUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: productModelUpdateManyWithWhereWithoutUserInput | productModelUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: productModelScalarWhereInput | productModelScalarWhereInput[]
  }

  export type productModelUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<productModelCreateWithoutUserInput, productModelUncheckedCreateWithoutUserInput> | productModelCreateWithoutUserInput[] | productModelUncheckedCreateWithoutUserInput[]
    connectOrCreate?: productModelCreateOrConnectWithoutUserInput | productModelCreateOrConnectWithoutUserInput[]
    upsert?: productModelUpsertWithWhereUniqueWithoutUserInput | productModelUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: productModelCreateManyUserInputEnvelope
    set?: productModelWhereUniqueInput | productModelWhereUniqueInput[]
    disconnect?: productModelWhereUniqueInput | productModelWhereUniqueInput[]
    delete?: productModelWhereUniqueInput | productModelWhereUniqueInput[]
    connect?: productModelWhereUniqueInput | productModelWhereUniqueInput[]
    update?: productModelUpdateWithWhereUniqueWithoutUserInput | productModelUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: productModelUpdateManyWithWhereWithoutUserInput | productModelUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: productModelScalarWhereInput | productModelScalarWhereInput[]
  }

  export type authModelCreateNestedOneWithoutStoreInput = {
    create?: XOR<authModelCreateWithoutStoreInput, authModelUncheckedCreateWithoutStoreInput>
    connectOrCreate?: authModelCreateOrConnectWithoutStoreInput
    connect?: authModelWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type authModelUpdateOneRequiredWithoutStoreNestedInput = {
    create?: XOR<authModelCreateWithoutStoreInput, authModelUncheckedCreateWithoutStoreInput>
    connectOrCreate?: authModelCreateOrConnectWithoutStoreInput
    upsert?: authModelUpsertWithoutStoreInput
    connect?: authModelWhereUniqueInput
    update?: XOR<XOR<authModelUpdateToOneWithWhereWithoutStoreInput, authModelUpdateWithoutStoreInput>, authModelUncheckedUpdateWithoutStoreInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type productModelCreateWithoutUserInput = {
    id?: string
    title: string
    cost: number
    description: string
    category: string
    image: string
    imageID?: string | null
    brand: string
    createdAt?: Date | string
    condition: string
    price: number
  }

  export type productModelUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    cost: number
    description: string
    category: string
    image: string
    imageID?: string | null
    brand: string
    createdAt?: Date | string
    condition: string
    price: number
  }

  export type productModelCreateOrConnectWithoutUserInput = {
    where: productModelWhereUniqueInput
    create: XOR<productModelCreateWithoutUserInput, productModelUncheckedCreateWithoutUserInput>
  }

  export type productModelCreateManyUserInputEnvelope = {
    data: productModelCreateManyUserInput | productModelCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type productModelUpsertWithWhereUniqueWithoutUserInput = {
    where: productModelWhereUniqueInput
    update: XOR<productModelUpdateWithoutUserInput, productModelUncheckedUpdateWithoutUserInput>
    create: XOR<productModelCreateWithoutUserInput, productModelUncheckedCreateWithoutUserInput>
  }

  export type productModelUpdateWithWhereUniqueWithoutUserInput = {
    where: productModelWhereUniqueInput
    data: XOR<productModelUpdateWithoutUserInput, productModelUncheckedUpdateWithoutUserInput>
  }

  export type productModelUpdateManyWithWhereWithoutUserInput = {
    where: productModelScalarWhereInput
    data: XOR<productModelUpdateManyMutationInput, productModelUncheckedUpdateManyWithoutUserInput>
  }

  export type productModelScalarWhereInput = {
    AND?: productModelScalarWhereInput | productModelScalarWhereInput[]
    OR?: productModelScalarWhereInput[]
    NOT?: productModelScalarWhereInput | productModelScalarWhereInput[]
    id?: StringFilter<"productModel"> | string
    title?: StringFilter<"productModel"> | string
    cost?: IntFilter<"productModel"> | number
    description?: StringFilter<"productModel"> | string
    category?: StringFilter<"productModel"> | string
    image?: StringFilter<"productModel"> | string
    imageID?: StringNullableFilter<"productModel"> | string | null
    brand?: StringFilter<"productModel"> | string
    createdAt?: DateTimeFilter<"productModel"> | Date | string
    condition?: StringFilter<"productModel"> | string
    price?: IntFilter<"productModel"> | number
    userID?: StringFilter<"productModel"> | string
  }

  export type authModelCreateWithoutStoreInput = {
    id?: string
    userName: string
    email: string
    password: string
    verified?: boolean
    token?: string | null
    avatar?: string | null
    avatarID?: string | null
    role?: string | null
    roleID?: string | null
    createdAt?: Date | string
  }

  export type authModelUncheckedCreateWithoutStoreInput = {
    id?: string
    userName: string
    email: string
    password: string
    verified?: boolean
    token?: string | null
    avatar?: string | null
    avatarID?: string | null
    role?: string | null
    roleID?: string | null
    createdAt?: Date | string
  }

  export type authModelCreateOrConnectWithoutStoreInput = {
    where: authModelWhereUniqueInput
    create: XOR<authModelCreateWithoutStoreInput, authModelUncheckedCreateWithoutStoreInput>
  }

  export type authModelUpsertWithoutStoreInput = {
    update: XOR<authModelUpdateWithoutStoreInput, authModelUncheckedUpdateWithoutStoreInput>
    create: XOR<authModelCreateWithoutStoreInput, authModelUncheckedCreateWithoutStoreInput>
    where?: authModelWhereInput
  }

  export type authModelUpdateToOneWithWhereWithoutStoreInput = {
    where?: authModelWhereInput
    data: XOR<authModelUpdateWithoutStoreInput, authModelUncheckedUpdateWithoutStoreInput>
  }

  export type authModelUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    avatarID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    roleID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type authModelUncheckedUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    avatarID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    roleID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productModelCreateManyUserInput = {
    id?: string
    title: string
    cost: number
    description: string
    category: string
    image: string
    imageID?: string | null
    brand: string
    createdAt?: Date | string
    condition: string
    price: number
  }

  export type productModelUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    imageID?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    condition?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type productModelUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    imageID?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    condition?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type productModelUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    imageID?: NullableStringFieldUpdateOperationsInput | string | null
    brand?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    condition?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AuthModelCountOutputTypeDefaultArgs instead
     */
    export type AuthModelCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = AuthModelCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use authModelDefaultArgs instead
     */
    export type authModelArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = authModelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use dispatcherModelDefaultArgs instead
     */
    export type dispatcherModelArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = dispatcherModelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use productModelDefaultArgs instead
     */
    export type productModelArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = productModelDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}